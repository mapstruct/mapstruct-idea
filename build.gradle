import com.hierynomus.gradle.license.tasks.LicenseCheck
import com.hierynomus.gradle.license.tasks.LicenseFormat
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id "org.jetbrains.intellij.platform" version "2.0.1"
    id "com.github.hierynomus.license" version "0.16.1"
    id "de.undercouch.download" version "5.6.0"
}


group pluginGroup
version pluginVersion

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij.platform'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenLocal()
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

intellijPlatform {
    instrumentCode = false
    projectName = 'MapStruct-Intellij-Plugin'
    pluginConfiguration {
        ideaVersion {
            sinceBuild = "223"
            untilBuild = provider { null } as Provider<? extends String>
        }
    }
}

// Simple function to load change-notes.html and description.html into valid text for plugin.xml
def htmlFixer = {f -> file(f).text.replace('<html>', '').replace('</html>', '')}

patchPluginXml {
    changeNotes = htmlFixer('change-notes.html')
    pluginDescription = htmlFixer('description.html')
}

task licenseTestData(type: LicenseCheck) {
    source = fileTree(dir: "testData").include("**/*")
}

task licenseFormatForKotlin(type: LicenseFormat) {
    source = fileTree(dir: "src/main").include("**/*.kt").include("**/*.xml")
}

license {
    header rootProject.file('etc/license.txt')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE' // IntelliJ reports the JAVADOC_STYLE as a dangling comment
    }
    excludes([
            '**/META-INF/plugin.xml', // For some reason the plugin thinks that the license is not valid
            '**/*.properties',
            '**/inspectionDescriptions/*.html'
    ])
}

licenseFormat.dependsOn licenseFormatForKotlin
licenseTest.dependsOn licenseTestData

checkstyle {
    toolVersion '8.36.1'
    config resources.text.fromUri("https://raw.githubusercontent.com/mapstruct/mapstruct/master/build-config/src/main/resources/build-config/checkstyle.xml")
    configProperties = [
            'checkstyle.cache.file': rootProject.layout.buildDirectory.get().asFile.toPath(  ).resolve( 'checkstyle-cachefile').toString(),
            'basedir': 'https://raw.githubusercontent.com/mapstruct/mapstruct/master/build-config',
    ]
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

def versionToUse = System.getenv().getOrDefault( 'IDEA_VERSION', ideaVersion )
def useInstaller = !versionToUse.containsIgnoreCase( "EAP" )
dependencies {
    intellijPlatform {
        ideaType == 'IC' ? intellijIdeaCommunity(versionToUse, useInstaller) : intellijIdeaUltimate(versionToUse, useInstaller)

        jetbrainsRuntime()

        bundledPlugin( 'com.intellij.java' )
        bundledPlugin( 'org.jetbrains.kotlin' )

        testFramework( TestFrameworkType.Platform.INSTANCE )
        testFramework( TestFrameworkType.Bundled.INSTANCE )
    }
    implementation('org.mapstruct:mapstruct:1.5.3.Final')
    testImplementation(platform('org.junit:junit-bom:5.11.0'))
    testImplementation('org.junit.platform:junit-platform-launcher')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
    testImplementation('org.assertj:assertj-core:3.26.3')
    testImplementation('org.apache.commons:commons-text:1.12.0')
    testImplementation( 'junit:junit:4.13.2' )
}

task libs(type: Sync) {
    from configurations.runtimeClasspath
    into layout.buildDirectory.dir("libs")
    preserve {
        include 'mapstruct-intellij-*.jar'
        include 'MapStruct-Intellij-*.jar'
    }
    rename 'mapstruct-1.5.3.Final.jar', 'mapstruct.jar'
}

prepareSandbox.dependsOn( libs )
composedJar.dependsOn( libs )

test {
    // Idea SDK needs special configuration
    // see https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-faq.html#jacoco-reports-0-coverage
    jacoco {
        includeNoLocationClasses = true
        excludes = ["jdk.internal.*"]
    }
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}
