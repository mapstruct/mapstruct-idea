plugins {
    id "org.jetbrains.intellij" version "0.3.12"
    id "com.github.hierynomus.license" version "0.14.0"
    id "de.undercouch.download" version "3.4.3"
}


group pluginGroup
version pluginVersion

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
    }
}

intellij {
    version System.getenv().getOrDefault('IDEA_VERSION', ideaVersion)
    type ideaType
    downloadSources Boolean.valueOf(sources)
    sameSinceUntilBuild Boolean.valueOf(isEAP)
    alternativeIdePath idePath
    updateSinceUntilBuild false
    pluginName 'MapStruct-Intellij-Plugin'
}

// Simple function to load change-notes.html and description.html into valid text for plugin.xml
def htmlFixer = {f -> file(f).text.replace('<html>', '').replace('</html>', '')}

patchPluginXml {
    changeNotes = htmlFixer('change-notes.html')
    pluginDescription = htmlFixer('description.html')
}

task licenseTestData(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "testData").include("**/*")
}

license {
    header rootProject.file('etc/license.txt')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE' // IntelliJ reports the JAVADOC_STYLE as a dangling comment
    }
    excludes([
            '**/META-INF/plugin.xml', // For some reason the plugin thinks that the license is not valid
            '**/*.properties',
            '**/inspectionDescriptions/*.html'
    ])
}

licenseTest.dependsOn licenseTestData

checkstyle {
//    configFile file( new File(new URL("https://raw.githubusercontent.com/mapstruct/mapstruct/master/build-config/src/main/resources/build-config/checkstyle.xml").toURI( ) ) )
}

jacoco {
    toolVersion "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dependencies {
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.2.0.Final'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
}

task libs(type: Sync) {
    from configurations.compile
    into "$buildDir/libs"
    preserve {
        include 'mapstruct-intellij-*.jar'
    }
    rename 'mapstruct-jdk8.*', 'mapstruct.jar'
}

def mockJdkLocation = "https://github.com/JetBrains/intellij-community/raw/master/java/mock"
def mockJdkDest = "$buildDir/mock"
def downloadMockJdk(mockJdkLocation, mockJdkDest, mockJdkVersion) {
    def location = mockJdkLocation + mockJdkVersion
    def destination = mockJdkDest + mockJdkVersion
    download {
        src([
            "$location/jre/lib/annotations.jar",
            "$location/jre/lib/rt.jar"
        ])
        dest "$destination/jre/lib/"
        overwrite false
        quiet false
    }
}

task downloadMockJdk7() {
    def jdkVersion = "JDK-1.7"
    def mockJdk7Location = mockJdkLocation + jdkVersion
    def mockJdk7Dest = mockJdkDest + jdkVersion
    downloadMockJdk(mockJdkLocation, mockJdkDest, jdkVersion)
    download {
        src([
             "$mockJdk7Location/src.zip"
        ])
        dest "$mockJdk7Dest"
        overwrite false
        quiet false
    }
}

task downloadMockJdk8() {
    downloadMockJdk(mockJdkLocation, mockJdkDest, "JDK-1.8")
}

test.dependsOn( libs, downloadMockJdk7, downloadMockJdk8 )

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
