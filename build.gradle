import com.hierynomus.gradle.license.tasks.LicenseCheck
import com.hierynomus.gradle.license.tasks.LicenseFormat
import de.undercouch.gradle.tasks.download.Download

plugins {
    id "org.jetbrains.intellij" version "1.17.3"
    id "com.github.hierynomus.license" version "0.16.1"
    id "de.undercouch.download" version "5.6.0"
}


group pluginGroup
version pluginVersion

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

repositories {
    mavenLocal()
    mavenCentral()
}

intellij {
    version = System.getenv().getOrDefault( 'IDEA_VERSION', ideaVersion )
    type = ideaType
    downloadSources = Boolean.valueOf(sources)
    sameSinceUntilBuild = Boolean.valueOf(System.getenv().getOrDefault('IDEA_EAP', isEAP))
    instrumentCode = false
    updateSinceUntilBuild = false
    pluginName = 'MapStruct-Intellij-Plugin'
    // The properties plugin is needed because Kotlin uses it
    // and for some reason plugins does not transitively pull itx
    plugins = ['java', 'Kotlin', 'properties']
}

// Simple function to load change-notes.html and description.html into valid text for plugin.xml
def htmlFixer = {f -> file(f).text.replace('<html>', '').replace('</html>', '')}

patchPluginXml {
    changeNotes = htmlFixer('change-notes.html')
    pluginDescription = htmlFixer('description.html')
}

tasks.register "licenseTestData", LicenseCheck, {
    source = fileTree(dir: "testData").include("**/*")
}

tasks.register "licenseFormatForKotlin", LicenseFormat, {
    source = fileTree(dir: "src/main").include("**/*.kt").include("**/*.xml")
}

license {
    header rootProject.file('etc/license.txt')
    strictCheck true
    mapping('java', 'SLASHSTAR_STYLE') // IntelliJ reports the JAVADOC_STYLE as a dangling comment
    excludes([
            '**/META-INF/plugin.xml', // For some reason the plugin thinks that the license is not valid
            '**/*.properties',
            '**/inspectionDescriptions/*.html'
    ])
}

licenseFormat.dependsOn licenseFormatForKotlin
licenseTest.dependsOn licenseTestData

checkstyle {
    config resources.text.fromUri("https://raw.githubusercontent.com/mapstruct/mapstruct/master/build-config/src/main/resources/build-config/checkstyle.xml")
    configProperties = [
            'checkstyle.cache.file': rootProject.layout.buildDirectory.get().asFile.toPath().resolve('checkstyle-cachefile').toString(),
            'basedir': 'https://raw.githubusercontent.com/mapstruct/mapstruct/master/build-config',
    ]
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

dependencies {
    implementation( "org.mapstruct:mapstruct:$mapstructVersion" )
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.platform:junit-platform-launcher')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
    testImplementation('org.assertj:assertj-core:3.26.0')
    testImplementation('org.apache.commons:commons-text:1.12.0')
}

def libs = tasks.register "libs", Sync, {
    from configurations.runtimeClasspath
    into "${layout.buildDirectory.get().asFile}/libs"
    preserve {
        include 'mapstruct-intellij-*.jar'
    }
    rename "mapstruct-${mapstructVersion}.jar", 'mapstruct.jar'
}
[prepareSandbox, prepareTestingSandbox, test]*.each { it.dependsOn libs }


def mockJdkLocation = "https://github.com/JetBrains/intellij-community/raw/212.5712/java"
def mockJdkDest = "${layout.buildDirectory.get().asFile}"
for ( def jdkVersion : [7, 8, 11] ) {
    def jdkName = "mockJDK-${jdkVersion < 9 ? "1.$jdkVersion" : "$jdkVersion"}"
    def mockJdkSrc = "$mockJdkLocation/$jdkName"
    test.dependsOn(
            tasks.register "downloadMockJdk$jdkName", Download, { task ->
                src( "$mockJdkSrc/jre/lib/annotations.jar" )
                src( "$mockJdkSrc/jre/lib/rt.jar" )
                dest "$mockJdkDest/$jdkName/jre/lib"
                overwrite false
                quiet false
            }
    )
}

classpathIndexCleanup.mustRunAfter compileTestJava  // a workaround for a someone else's bug

test {
    // Idea SDK needs special configuration
    // see https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-faq.html#jacoco-reports-0-coverage
    jacoco {
        includeNoLocationClasses = true
        excludes = ["jdk.internal.*"]
    }
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    classDirectories.from = instrumentCode
}

jacocoTestCoverageVerification {
    classDirectories.from = instrumentCode
}
